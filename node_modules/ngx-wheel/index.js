import { Component, EventEmitter, Input, NgModule, Output, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';

var NgxWheelComponent = (function () {
    function NgxWheelComponent() {
        this.beforeSpin = new EventEmitter();
        this.afterSpin = new EventEmitter();
        this.spinAngleStart = 0;
        this.spun = false;
        this.dragging = false;
        this.disableSpinBtn = false;
        this.container = document.getElementById("container2");
        this.target = document.getElementById("ng-wheel-canvas");
    }
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.ngOnInit = function () {
        while (!this.prize_descriptions)
            ;
        this.init();
        this.drawSpinnerWheel();
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.ngAfterViewChecked = function () { };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.init = function () {
        if (this.spinOnce == undefined) {
            this.spinOnce == true;
        }
        this.arcDeg = 360 / this.prize_descriptions.length;
        this.startAngle = this.arcDeg / 2 * Math.PI / 180;
        this.arc = this.arcDeg * Math.PI / 180; //Math.PI / 4;
        this.angleNeeded = this.getAngleNeeded(this.prizeToWin);
        if (this.spinRange) {
            this.spins =
                Math.floor(Math.random() * this.spinRange[1]) + this.spinRange[0];
        }
        else {
            this.spins = Math.floor(Math.random() * 5) + 1;
        }
        this.angleToBeSpun = this.angleNeeded + this.spins * 360;
        this.spinTimeout = null;
        this.spinArcStart = 0;
        this.spinTime = 0;
        this.spinTimeTotal = 0;
        this.current_user_status = null;
        this.spin_results = null;
        this.ctx = null;
        if (!this.spun) {
            this.attachListeners();
        }
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.attachListeners = function () {
        var /** @type {?} */ arrowCanvas = document.getElementById("arrow-canvas");
        arrowCanvas.style.cursor = 'move';
        arrowCanvas.addEventListener("touchstart", this.handleStart.bind(this), false);
        arrowCanvas.addEventListener("mousedown", this.handleStart.bind(this), false);
        // listen while dragging
        arrowCanvas.addEventListener("touchend", this.handleEnd.bind(this), false);
        arrowCanvas.addEventListener("mouseup", this.handleEnd.bind(this), false);
        // listen after dragging is complete
        arrowCanvas.addEventListener("touchmove", this.handleMove.bind(this), false);
        arrowCanvas.addEventListener("mousemove", this.handleMove.bind(this), false);
    };
    /**
     * @param {?} prize
     * @return {?}
     */
    NgxWheelComponent.prototype.getAngleNeeded = function (prize) {
        var /** @type {?} */ degrees = this.startAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        var /** @type {?} */ currentIndex = Math.floor((360 - degrees % 360) / arcd);
        var /** @type {?} */ neededIndex = this.prize_descriptions.indexOf(prize);
        if (this.prize_descriptions.length == 6) {
            arcd -= 10;
        }
        if (this.prize_descriptions.length == 9) {
            arcd -= 5;
        }
        if (this.prize_descriptions.length == 10) {
            arcd -= 5;
        }
        if (currentIndex == neededIndex) {
            return 0;
        }
        if (currentIndex > neededIndex) {
            return arcd * (currentIndex - neededIndex);
        }
        return (arcd * (currentIndex + (this.prize_descriptions.length - neededIndex)));
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.drawSpinnerWheel = function () {
        var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
        if (canvas.getContext) {
            var /** @type {?} */ outsideRadius = 200;
            var /** @type {?} */ textRadius = 170;
            this.ctx = canvas.getContext("2d");
            this.ctx.clearRect(0, 0, 500, 500);
            this.ctx.strokeStyle = this.stroke;
            this.ctx.lineWidth = this.strokeWidth;
            for (var /** @type {?} */ i = 0; i < this.prize_descriptions.length; i++) {
                var /** @type {?} */ angle = this.startAngle + i * this.arc;
                this.ctx.fillStyle = this.colors[i];
                this.ctx.beginPath();
                this.ctx.arc(250, 250, outsideRadius, angle, angle + this.arc, false);
                this.ctx.arc(250, 250, 0, angle + this.arc, angle, true);
                this.ctx.stroke();
                this.ctx.fill();
                this.ctx.save();
                this.ctx.shadowOffsetX = -1;
                this.ctx.shadowOffsetY = -1;
                this.ctx.shadowBlur = 0;
                // this.ctx.shadowColor = "rgb(220,220,220)";
                this.ctx.fillStyle = this.fontColor;
                this.ctx.translate(250 + Math.cos(angle + this.arc / 2) * textRadius, 250 + Math.sin(angle + this.arc / 2) * textRadius);
                this.ctx.rotate(angle + this.arc / 2 + Math.PI / 2);
                this.ctx.font = "bold 15px Helvetica, Arial";
                var /** @type {?} */ text;
                if (this.prize_descriptions[i] === undefined) {
                    text = "Not this time!";
                }
                else {
                    text = this.prize_descriptions[i];
                }
                var /** @type {?} */ textArray = text.split(" ");
                for (var /** @type {?} */ index = 0; index < textArray.length; index++) {
                    var /** @type {?} */ element = textArray[index];
                    this.ctx.fillText(element, -this.ctx.measureText(element).width / 2, index * 15);
                }
                this.ctx.restore();
            }
            var /** @type {?} */ arrowCanvas = document.getElementById("arrow-canvas");
            var /** @type {?} */ arrowCtx = arrowCanvas.getContext("2d");
            //Arrow
            // arrowCtx.save();
            arrowCtx.fillStyle = "white";
            arrowCtx.beginPath();
            arrowCtx.arc(250, 250, 100, 0, 2 * Math.PI, false);
            arrowCtx.stroke();
            arrowCtx.fill();
            arrowCtx.font = "bold 30px Helvetica, Arial";
            arrowCtx.fillStyle = "black";
            arrowCtx.fillText(this.centerText, 250 - arrowCtx.measureText(this.centerText).width / 2, 250 + 10);
            arrowCtx.fillStyle = this.arrowColor;
            arrowCtx.beginPath();
            arrowCtx.moveTo(250 - 4, 250 - (outsideRadius + 5));
            arrowCtx.lineTo(250 + 4, 250 - (outsideRadius + 5));
            arrowCtx.lineTo(250 + 4, 250 - (outsideRadius - 5));
            arrowCtx.lineTo(250 + 9, 250 - (outsideRadius - 5));
            arrowCtx.lineTo(250 + 0, 250 - (outsideRadius - 13));
            arrowCtx.lineTo(250 - 9, 250 - (outsideRadius - 5));
            arrowCtx.lineTo(250 - 4, 250 - (outsideRadius - 5));
            arrowCtx.lineTo(250 - 4, 250 - (outsideRadius + 5));
            arrowCtx.fill();
            // arrowCtx.restore();
        }
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.spin = function () {
        this.spinAngleStart = this.angleToBeSpun / 32.807503994186335; //31.907503994186335 degrees per number;
        this.spinTime = 0;
        this.spinTimeTotal = 2 * 3 + 4 * 1000;
        this.rotateWheel();
    };
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    NgxWheelComponent.prototype.easeOut = function (t, b, c, d) {
        var /** @type {?} */ ts = (t /= d) * t;
        var /** @type {?} */ tc = ts * t;
        return b + c * (tc + -3 * ts + 3 * t);
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.rotateWheel = function () {
        this.spinTime += 30;
        if (this.spinTime >= this.spinTimeTotal) {
            this.stopRotateWheel();
            return;
        }
        var /** @type {?} */ spinAngle = this.spinAngleStart -
            this.easeOut(this.spinTime, 0, this.spinAngleStart, this.spinTimeTotal);
        var /** @type {?} */ degrees = spinAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        this.startAngle += spinAngle * Math.PI / 180;
        this.drawSpinnerWheel();
        var /** @type {?} */ that = this;
        this.spinTimeout = setTimeout(function () {
            that.rotateWheel();
        }, 10);
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.stopRotateWheel = function () {
        clearTimeout(this.spinTimeout);
        var /** @type {?} */ degrees = this.startAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        var /** @type {?} */ index = Math.floor((360 - degrees % 360) / arcd);
        this.ctx.save();
        this.ctx.font = "bold 2px Helvetica, Arial";
        var /** @type {?} */ text = this.prize_descriptions[index];
        this.ctx.fillText(text, 250 - this.ctx.measureText(text).width / 2, 250 + 10);
        this.ctx.restore();
        if (this.afterSpin)
            this.afterSpin.emit(1);
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.canSpin = function () {
        return (this.spinOnce && !this.spun) || !this.spinOnce;
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.disableButton = function () {
        if (this.spinOnce) {
            return this.spun;
        }
        return false;
    };
    /**
     * @return {?}
     */
    NgxWheelComponent.prototype.clicked = function () {
        // this.disableSpinBtn = this.disableButton();
        if (!this.canSpin())
            return;
        if (this.spun) {
            this.init();
        }
        this.spun = true;
        if (this.beforeSpin) {
            this.beforeSpin.emit({});
            console.log("I emitted");
        }
        this.spin();
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NgxWheelComponent.prototype.findTop = function (element) {
        var /** @type {?} */ rec = element.getBoundingClientRect();
        return rec.top + window.scrollY;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NgxWheelComponent.prototype.findLeft = function (element) {
        var /** @type {?} */ rec = element.getBoundingClientRect();
        return rec.left + window.scrollX;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxWheelComponent.prototype.handleStart = function (e) {
        // at the start of the drag process, set the dragging flag to true
        this.dragging = true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxWheelComponent.prototype.handleMove = function (e) {
        // if the user is dragging
        if (this.dragging) {
            var /** @type {?} */ container = document.getElementById("container2");
            // get the center of the wheel as an array of [x, y]
            var /** @type {?} */ targetCenter = [
                this.findLeft(container) + container.offsetWidth / 2,
                this.findTop(container) + container.offsetHeight / 2
            ];
            // get the angle needed to rotate the wheel to follow the mouse/touch
            var /** @type {?} */ angle = Math.round(Math.atan2(e.pageX - targetCenter[0], -(e.pageY - targetCenter[1])) *
                (180 / Math.PI));
            // add css to rotate
            var /** @type {?} */ styleString = "";
            styleString += "-webkit-transform: rotate(" + angle + "deg);";
            styleString += "-moz-transform: rotate(" + angle + "deg);";
            styleString += "transform: rotate(" + angle + "deg);";
            var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
            // set the style to the css
            canvas.setAttribute("style", styleString);
        }
        e.preventDefault();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxWheelComponent.prototype.handleEnd = function (e) {
        // set the dragging to false
        this.dragging = false;
        // create css to rotate the wheel back to how it was
        var /** @type {?} */ degree = 0;
        var /** @type {?} */ styleString = "";
        styleString += "-moz-transform: rotate(" + degree + "deg);";
        styleString += "-moz-transform-origin: 50% 50%;";
        styleString += "-webkit-transform: rotate(" + degree + "deg);";
        styleString += "-webkit-transform-origin: 50% 50%;";
        styleString += "-o-transform: rotate(" + degree + "deg);";
        styleString += "-o-transform-origin: 50% 50%;";
        styleString += "-ms-transform: rotate(" + degree + "deg);";
        styleString += "-ms-transform-origin: 50% 50%;";
        var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
        // set the style to the css
        canvas.setAttribute("style", styleString);
        // after the wheel is upright again, spin the wheel
        this.clicked();
        // this.spin();
    };
    return NgxWheelComponent;
}());
NgxWheelComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-wheel",
                template: "\n<div class=\"\">\n  <div class=\"container2\" id=\"container2\">\n    <div id=\"circle\">\n      <div id=\"canvas-container\">\n      <canvas id=\"ng-wheel-canvas\" width=\"500\" height=\"500\"></canvas>\n      <canvas id=\"arrow-canvas\" width=\"500\" height=\"500\" style=\"position: absolute; \n      z-index: 2;\n      \"></canvas>\n      </div>\n    </div>\n  </div>\n</div>",
                styles: [".center { text-align: center; } #arrow-canvas { position: absolute; left: 50%; top: 0; margin-left: -250px; } .container2 { width: 100%; height: 500px; text-align: center; } #canvas-container { position: relative; margin: 0 auto; top: 0; left: 0; right: 0; bottom: 0; width: 500px; height: 500px; } #circle{ position: relative; margin: 0 auto; clip-path: circle(40%); cursor: move; top: 0; left: 0; right: 0; bottom: 0; width: 500px; height: 500px; }"],
                encapsulation: ViewEncapsulation.Emulated
            },] },
];
/**
 * @nocollapse
 */
NgxWheelComponent.ctorParameters = function () { return []; };
NgxWheelComponent.propDecorators = {
    'colors': [{ type: Input },],
    'fontColor': [{ type: Input },],
    'arrowColor': [{ type: Input },],
    'spinOnce': [{ type: Input },],
    'spinRange': [{ type: Input },],
    'prizeToWin': [{ type: Input },],
    'centerText': [{ type: Input },],
    'prize_descriptions': [{ type: Input },],
    'stroke': [{ type: Input },],
    'strokeWidth': [{ type: Input },],
    'beforeSpin': [{ type: Output },],
    'afterSpin': [{ type: Output },],
};

var NgxMobileWheelComponent = (function () {
    function NgxMobileWheelComponent() {
        this.beforeSpin = new EventEmitter();
        this.afterSpin = new EventEmitter();
        this.spinAngleStart = 0;
        this.spun = false;
        this.dragging = false;
        this.disableSpinBtn = false;
        this.container = document.getElementById("container2");
        this.target = document.getElementById("ng-wheel-canvas");
    }
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.ngOnInit = function () {
        while (!this.prize_descriptions)
            ;
        this.init();
        this.drawSpinnerWheel();
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.ngAfterViewChecked = function () { };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.init = function () {
        if (this.spinOnce == undefined) {
            this.spinOnce == true;
        }
        this.arcDeg = 360 / this.prize_descriptions.length;
        this.startAngle = this.arcDeg / 2 * Math.PI / 180;
        this.arc = this.arcDeg * Math.PI / 180; //Math.PI / 4;
        this.angleNeeded = this.getAngleNeeded(this.prizeToWin);
        if (this.spinRange) {
            this.spins =
                Math.floor(Math.random() * this.spinRange[1]) + this.spinRange[0];
        }
        else {
            this.spins = Math.floor(Math.random() * 5) + 1;
        }
        this.angleToBeSpun = this.angleNeeded + this.spins * 360;
        this.spinTimeout = null;
        this.spinArcStart = 0;
        this.spinTime = 0;
        this.spinTimeTotal = 0;
        this.current_user_status = null;
        this.spin_results = null;
        this.ctx = null;
        if (!this.spun) {
            this.attachListeners();
        }
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.attachListeners = function () {
        var /** @type {?} */ arrowCanvas = document.getElementById("arrow-canvas");
        arrowCanvas.addEventListener("touchstart", this.handleStart.bind(this), false);
        arrowCanvas.addEventListener("mousedown", this.handleStart.bind(this), false);
        // listen while dragging
        arrowCanvas.addEventListener("touchend", this.handleEnd.bind(this), false);
        arrowCanvas.addEventListener("mouseup", this.handleEnd.bind(this), false);
        // listen after dragging is complete
        arrowCanvas.addEventListener("touchmove", this.handleMove.bind(this), false);
        arrowCanvas.addEventListener("mousemove", this.handleMove.bind(this), false);
    };
    /**
     * @param {?} prize
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.getAngleNeeded = function (prize) {
        var /** @type {?} */ degrees = this.startAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        var /** @type {?} */ currentIndex = Math.floor((360 - degrees % 360) / arcd);
        var /** @type {?} */ neededIndex = this.prize_descriptions.indexOf(prize);
        if (this.prize_descriptions.length == 6) {
            arcd -= 10;
        }
        if (this.prize_descriptions.length == 9) {
            arcd -= 5;
        }
        if (this.prize_descriptions.length == 10) {
            arcd -= 5;
        }
        if (currentIndex == neededIndex) {
            return 0;
        }
        if (currentIndex > neededIndex) {
            return arcd * (currentIndex - neededIndex);
        }
        return (arcd * (currentIndex + (this.prize_descriptions.length - neededIndex)));
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.replace = function (text) {
        var /** @type {?} */ res = text.replace(" ", "\n");
        return res;
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.drawSpinnerWheel = function () {
        var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
        if (canvas.getContext) {
            var /** @type {?} */ outsideRadius = 150;
            var /** @type {?} */ textRadius = 130;
            this.ctx = canvas.getContext("2d");
            this.ctx.clearRect(0, 0, 300, 300);
            this.ctx.strokeStyle = this.stroke;
            this.ctx.lineWidth = this.strokeWidth;
            for (var /** @type {?} */ i = 0; i < this.prize_descriptions.length; i++) {
                var /** @type {?} */ angle = this.startAngle + i * this.arc;
                this.ctx.fillStyle = this.colors[i];
                this.ctx.beginPath();
                this.ctx.arc(150, 150, outsideRadius, angle, angle + this.arc, false);
                this.ctx.arc(150, 150, 0, angle + this.arc, angle, true);
                this.ctx.stroke();
                this.ctx.fill();
                this.ctx.save();
                this.ctx.shadowOffsetX = -1;
                this.ctx.shadowOffsetY = -1;
                this.ctx.shadowBlur = 0;
                // this.ctx.shadowColor = "rgb(220,220,220)";
                this.ctx.fillStyle = this.fontColor;
                this.ctx.translate(150 + Math.cos(angle + this.arc / 2) * textRadius, 150 + Math.sin(angle + this.arc / 2) * textRadius);
                this.ctx.rotate(angle + this.arc / 2 + Math.PI / 2);
                this.ctx.font = "bold 12px Helvetica, Arial";
                var /** @type {?} */ text;
                if (this.prize_descriptions[i] === undefined) {
                    text = "Not this time!";
                }
                else {
                    text = this.prize_descriptions[i];
                }
                var /** @type {?} */ textArray = text.split(" ");
                for (var /** @type {?} */ index = 0; index < textArray.length; index++) {
                    var /** @type {?} */ element = textArray[index];
                    this.ctx.fillText(element, -this.ctx.measureText(element).width / 2, index * 10);
                }
                this.ctx.restore();
            }
            var /** @type {?} */ arrowCanvas = document.getElementById("arrow-canvas");
            var /** @type {?} */ arrowCtx = arrowCanvas.getContext("2d");
            //Arrow
            // arrowCtx.save();
            arrowCtx.fillStyle = "white";
            arrowCtx.beginPath();
            arrowCtx.arc(150, 150, 70, 0, 2 * Math.PI, false);
            arrowCtx.stroke();
            arrowCtx.fill();
            arrowCtx.font = "bold 20px Helvetica, Arial";
            arrowCtx.fillStyle = "black";
            arrowCtx.fillText(this.centerText, 150 - arrowCtx.measureText(this.centerText).width / 2, 150 + 10);
            arrowCtx.fillStyle = this.arrowColor;
            arrowCtx.beginPath();
            arrowCtx.moveTo(150 - 4, 150 - (outsideRadius + 5));
            arrowCtx.lineTo(150 + 4, 150 - (outsideRadius + 5));
            arrowCtx.lineTo(150 + 4, 150 - (outsideRadius - 5));
            arrowCtx.lineTo(150 + 9, 150 - (outsideRadius - 5));
            arrowCtx.lineTo(150 + 0, 150 - (outsideRadius - 13));
            arrowCtx.lineTo(150 - 9, 150 - (outsideRadius - 5));
            arrowCtx.lineTo(150 - 4, 150 - (outsideRadius - 5));
            arrowCtx.lineTo(150 - 4, 150 - (outsideRadius + 5));
            arrowCtx.fill();
            // arrowCtx.restore();
        }
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.spin = function () {
        this.spinAngleStart = this.angleToBeSpun / 32.807503994186335; //31.907503994186335 degrees per number;
        this.spinTime = 0;
        this.spinTimeTotal = 2 * 3 + 4 * 1000;
        this.rotateWheel();
    };
    /**
     * @param {?} t
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.easeOut = function (t, b, c, d) {
        var /** @type {?} */ ts = (t /= d) * t;
        var /** @type {?} */ tc = ts * t;
        return b + c * (tc + -3 * ts + 3 * t);
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.rotateWheel = function () {
        this.spinTime += 30;
        if (this.spinTime >= this.spinTimeTotal) {
            this.stopRotateWheel();
            return;
        }
        var /** @type {?} */ spinAngle = this.spinAngleStart -
            this.easeOut(this.spinTime, 0, this.spinAngleStart, this.spinTimeTotal);
        var /** @type {?} */ degrees = spinAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        this.startAngle += spinAngle * Math.PI / 180;
        this.drawSpinnerWheel();
        var /** @type {?} */ that = this;
        this.spinTimeout = setTimeout(function () {
            that.rotateWheel();
        }, 10);
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.stopRotateWheel = function () {
        clearTimeout(this.spinTimeout);
        var /** @type {?} */ degrees = this.startAngle * 180 / Math.PI + 90;
        var /** @type {?} */ arcd = this.arc * 180 / Math.PI;
        var /** @type {?} */ index = Math.floor((360 - degrees % 360) / arcd);
        this.ctx.save();
        this.ctx.font = "bold 2px Helvetica, Arial";
        var /** @type {?} */ text = this.prize_descriptions[index];
        this.ctx.fillText(text, 150 - this.ctx.measureText(text).width / 2, 150 + 10);
        this.ctx.restore();
        if (this.afterSpin)
            this.afterSpin.emit(1);
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.canSpin = function () {
        return (this.spinOnce && !this.spun) || !this.spinOnce;
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.disableButton = function () {
        if (this.spinOnce) {
            return this.spun;
        }
        return false;
    };
    /**
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.clicked = function () {
        // this.disableSpinBtn = this.disableButton();
        if (!this.canSpin())
            return;
        if (this.spun) {
            this.init();
        }
        this.spun = true;
        if (this.beforeSpin) {
            this.beforeSpin.emit({});
            console.log("I emitted");
        }
        this.spin();
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.findTop = function (element) {
        var /** @type {?} */ rec = element.getBoundingClientRect();
        return rec.top + window.scrollY;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.findLeft = function (element) {
        var /** @type {?} */ rec = element.getBoundingClientRect();
        return rec.left + window.scrollX;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.handleStart = function (e) {
        // at the start of the drag process, set the dragging flag to true
        this.dragging = true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.handleMove = function (e) {
        // if the user is dragging
        if (this.dragging) {
            var /** @type {?} */ container = document.getElementById("container2");
            // get the center of the wheel as an array of [x, y]
            var /** @type {?} */ targetCenter = [
                this.findLeft(container) + container.offsetWidth / 2,
                this.findTop(container) + container.offsetHeight / 2
            ];
            // get the angle needed to rotate the wheel to follow the mouse/touch
            var /** @type {?} */ angle = Math.round(Math.atan2(e.pageX - targetCenter[0], -(e.pageY - targetCenter[1])) *
                (180 / Math.PI));
            // add css to rotate
            var /** @type {?} */ styleString = "";
            styleString += "-webkit-transform: rotate(" + angle + "deg);";
            styleString += "-moz-transform: rotate(" + angle + "deg);";
            styleString += "transform: rotate(" + angle + "deg);";
            var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
            // set the style to the css
            canvas.setAttribute("style", styleString);
        }
        e.preventDefault();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMobileWheelComponent.prototype.handleEnd = function (e) {
        // set the dragging to false
        this.dragging = false;
        // create css to rotate the wheel back to how it was
        var /** @type {?} */ degree = 0;
        var /** @type {?} */ styleString = "";
        styleString += "-moz-transform: rotate(" + degree + "deg);";
        styleString += "-moz-transform-origin: 50% 50%;";
        styleString += "-webkit-transform: rotate(" + degree + "deg);";
        styleString += "-webkit-transform-origin: 50% 50%;";
        styleString += "-o-transform: rotate(" + degree + "deg);";
        styleString += "-o-transform-origin: 50% 50%;";
        styleString += "-ms-transform: rotate(" + degree + "deg);";
        styleString += "-ms-transform-origin: 50% 50%;";
        var /** @type {?} */ canvas = document.getElementById("ng-wheel-canvas");
        // set the style to the css
        canvas.setAttribute("style", styleString);
        // after the wheel is upright again, spin the wheel
        this.clicked();
        // this.spin();
    };
    return NgxMobileWheelComponent;
}());
NgxMobileWheelComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-mobile-wheel",
                template: "\n  <div class=\"\">\n    <div class=\"container2\" id=\"container2\">\n      <div id=\"circle-small\">\n        <div id=\"canvas-container\">\n          <canvas id=\"ng-wheel-canvas\" width=\"300\" height=\"300\"></canvas>\n          <canvas id=\"arrow-canvas\" width=\"300\" height=\"300\" style=\"position: absolute; z-index: 2;\"></canvas>\n        </div>\n      </div>\n    </div>\n  </div>",
                styles: [".center { text-align: center; } #arrow-canvas { position: absolute; left: 50%; top: 0; margin-left: -150px; } .container2 { width: 100%; height: 300px; text-align: center; } #canvas-container { position: relative; margin: 0 auto; top: 0; left: 0; right: 0; bottom: 0; width: 300px; height: 300px; } #circle-small{ position: relative; margin: 0 auto; cursor: move; clip-path: circle(50%); top: 0; left: 0; right: 0; bottom: 0; width: 300px; height: 300px; } "],
                encapsulation: ViewEncapsulation.Emulated
            },] },
];
/**
 * @nocollapse
 */
NgxMobileWheelComponent.ctorParameters = function () { return []; };
NgxMobileWheelComponent.propDecorators = {
    'colors': [{ type: Input },],
    'fontColor': [{ type: Input },],
    'arrowColor': [{ type: Input },],
    'spinOnce': [{ type: Input },],
    'spinRange': [{ type: Input },],
    'prizeToWin': [{ type: Input },],
    'centerText': [{ type: Input },],
    'stroke': [{ type: Input },],
    'strokeWidth': [{ type: Input },],
    'prize_descriptions': [{ type: Input },],
    'beforeSpin': [{ type: Output },],
    'afterSpin': [{ type: Output },],
};

/**
 * @return {?}
 */

/**
 * @return {?}
 */

var NgxWheelModule = (function () {
    function NgxWheelModule() {
    }
    return NgxWheelModule;
}());
NgxWheelModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NgxWheelComponent, NgxMobileWheelComponent],
                exports: [NgxWheelComponent, NgxMobileWheelComponent]
            },] },
];
/**
 * @nocollapse
 */
NgxWheelModule.ctorParameters = function () { return []; };

export { NgxWheelModule, NgxWheelComponent, NgxMobileWheelComponent };
